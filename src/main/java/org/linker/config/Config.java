package org.linker.config;import org.postgresql.ds.PGPoolingDataSource;import org.linker.repository.jpa.JpaLinkRepositoryImpl;import org.linker.repository.jpa.JpaTagRepositoryImpl;import org.linker.repository.jpa.JpaUserRepositoryImpl;import org.linker.service.LinkerService;import org.linker.service.LinkerServiceImpl;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;import org.springframework.orm.jpa.JpaTransactionManager;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import org.springframework.web.servlet.view.InternalResourceViewResolver;import org.springframework.web.servlet.view.JstlView;import javax.persistence.EntityManagerFactory;import javax.sql.DataSource;@EnableWebMvc@Configuration@ComponentScan({"org.linker"})public class Config extends WebMvcConfigurerAdapter {    @Override    public void addResourceHandlers(ResourceHandlerRegistry registry) {        registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");    }    @Bean    public InternalResourceViewResolver viewResolver() {        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();        viewResolver.setViewClass(JstlView.class);        viewResolver.setPrefix("/WEB-INF/views/jsp/");        viewResolver.setSuffix(".jsp");        return viewResolver;    }    public DataSource dataSource() {        PGPoolingDataSource dataSource = new PGPoolingDataSource();        dataSource.setDataSourceName("Simple Link Datasource");        dataSource.setServerName("localhost");        dataSource.setPortNumber(5432);        dataSource.setDatabaseName("simple_link");        dataSource.setUser("postgres");        dataSource.setPassword("1234");        dataSource.setMaxConnections(100);        dataSource.setInitialConnections(5);        return dataSource;    }    public EmbeddedDatabase testDataSource() {        return new EmbeddedDatabaseBuilder().                setType(EmbeddedDatabaseType.H2).                addScript("main/resources/db/postgresql/initDB.sql").                build();    }    @Bean    public EntityManagerFactory entityManagerFactory(DataSource dataSource) {        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();        vendorAdapter.setGenerateDdl(true);        LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();        factory.setPersistenceUnitName("postgresql");        factory.setJpaVendorAdapter(vendorAdapter);        factory.setPackagesToScan("org.belarusgo.model.domain");        factory.setDataSource(dataSource);        factory.afterPropertiesSet();        return factory.getObject();    }    @Bean    public PlatformTransactionManager transactionManager() {        JpaTransactionManager txManager = new JpaTransactionManager();        txManager.setEntityManagerFactory(entityManagerFactory(dataSource()));        return txManager;    }    @Bean    public LinkerService getService() {        return new LinkerServiceImpl(                new JpaLinkRepositoryImpl(entityManagerFactory(dataSource()).createEntityManager()),                new JpaUserRepositoryImpl(entityManagerFactory(dataSource()).createEntityManager()),                new JpaTagRepositoryImpl(entityManagerFactory(dataSource()).createEntityManager()));    }}